설명1

게임 만들러 왔는데 왜 이중 for문 같은 걸 해야 하나?
내가 지금 하고 있는 프로젝트를 예시로 보여주자.
월드 상에 동적으로 오브젝트를 스폰하는 숙제를 내 줄 것임.
그때는 3중 for문이다!

게임 만들러 왔는데 왜 이런걸 알아야 하나?
게임 ==  현대 기술로 치면 우주선 발사 (삶을 유지하는데에 그렇게 큰 영향을 미치지 않지만, 신기하게도 온 힘을 모아서 발전시키려고 하는 분야.)
첫째로, 현대의 가장 진보된 기술이 게임에 쓰인다는 점에서 그렇고, 
둘째로, 게임에서 성장한 기술들이 게임 이외의 분야에서도 많이 쓰인다는 점에서 그러하다.
다만... 이것을 배울 때 전부 다 삼키겠다는 생각은 금물. 
지금 들어두었다가 면접 다가와서 책 찾아보면 된다.
그때는 책에서 설명해주는 내용이 이해가 잘 될 것임.

1. 메모리 위계 - 앞의 것은 물리적인메모리 위계, 메모리에서 나뉘는 네가지 저장공간은 가상의 논리적 분할이다. 
(이 논리적 분할이 지켜지지 않으면 SW가 오작동을 일으키게 된다.)
	ㅅ  레지스터
	 |  캐시
	 |  메모리------ 코드: 컴파일 타임에 결정되고 저장된다. 실행을 하면 기계어로 번역되어 저장된 코드를 읽어온다. 리드온리.
	 |  하드	  |
	 V	  | -- 데이터: 전역/static 변수 등 프로그램이 상요하는 데이터가 저장되는 곳. 런타임 도중 변경 가능.
		  |
		  | -- 힙: 
		  |
		  | -- 스택

메모리 위계에서... 
위로 갈 수록 비싸고 빠르다. 연산장치에 가까워진다.
아래로 갈 수록 싸고 느리다. 연산장치에서 멀어진다.


2. 프로그램과 프로세스: 프로그램은 하드에 저장된 파일을 말한다. 가만히 내비두면 아무런 일도 일어나지 않음/프로세스는 이를 실행하는 걸 말함.

<컴파일타임>
우리가 코드를 쓰고 컴퓨터가 읽음.
빨간줄 -> 컴퓨터가 읽을 수 없다는 뜻. == 컴파일 에러
이 컴파일 타임에 지역변수가 할당됨
디버깅하면서 이를 알 수 있음. 
(실습)아직 main()의 중괄호에 들어가지도 않았는데 선언한 변수의 자리가 할당되고 거기에 쓰레기 값이 들어간 것을 확인했음.
런타임에 진입하면 더이상 편집이 불가능함! 

<런타임>
Ctrl + F5를 통해 프로그램을 실행하고나서 종료될 때까지의 시간
메인함수의 중괄호의 범위가 런타임의 범위이다.
여기서 생기는 오류는 런타임 오류는 버그라고 칭함. 예를 들어 스택 오버플로우. 컴파일은 잘 되는데 실행 중에 오작동함.


3. 정적(Static), 동적(Dynamic)
대부분의 프로그래밍 언어에서 많이 사용하는 용어.
언어가 아니더라도 SW 개발 분야에서 흔히 사용한다.
정적은, 미리 만들어 놓고 고정적으로 쓴다는 뜻.
동적은, 필요할 때마다 생성한다는 뜻. 

변수를 정적으로 만들었다면, 프로그램이 시작될 때 미리 그것을 만들어 두고 프로그램이 끝날 때까지 계속 쓰는 것.
반대로 동적은 프로그램 내에서 (프로그래머가 설정하기에 따라) 생성/삭제될 수 있는 것들에 대한 것.

		   [변수의 수명]
프로그램  <-------------------------------------->
정적변수  <-------------------------------------->
동적변수  			<--------->

우리가 지금까지 쓴 것들은 전부 정적할당임. 
static이 붙은 정적 지역변수는 함수에 대해서 특수하게 쓰이는 것이지만, 보통 우리가 변수를 선언하고 사용하는 행위는 대부분 정적할당이다.
즉, 컴파일타임에 
동적으로 프로그래머가 프로그램 실행 전에 메모리할당을 직접 명령하면, 이를 동적할당이라 부른다. 